<?php
/**
 * @file
 * Test iwUserWriter to ensure they generate correct users.
 */

/**
 * SimpleTest class which 
 *
 */
class iwUserWriterTestCase extends DrupalWebTestCase {
  
  /**
   * Users already create in the system during
   * iwUserWriterTestCase::setUp(). Allows testing
   * of import collisions.
   * 
   * @var array
   */
  protected $existingUsers;
  
  /**
   * Array of roles creates specifically for this
   * test. Allows testing of role import assignments.
   * 
   * Roles are listed with the index as {role}.rid
   * and the {role}.name as the value.
   * 
   * @var array
   */
  protected $roles;
  
  
  // ---------------------------------
  // Test case config
  // ---------------------------------
  
  /**
   * Static function to describe to Drupal basic display
   * information relating to this test.
   * 
   * @return array
   *  Containing information about this test case.
   */
  public static function getInfo() {
    return array(
      'name'        => 'Test core iwapi entity writers',
      'group'       => 'iwapi storage',
      'description' => 'Ensure the set of iwapi provided entity writers correctly write / test entity data.',
    );
  }
  
  /**
   * (non-PHPdoc)
   * @see DrupalWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array('iwapi')); // enable this module.
    
    // Create a couple new roles to be used with
    // the user importer modules.
    foreach (array('editor', 'webadmin', 'publisher') as $name) {
      $rid = $this->drupalCreateRole($permissions, $name);
      $this->roles[$rid] = $name;
    }
    
    // Generate some users so that we can test for collisions with
    // existing users. Unlike DrupalWebTestCase::drupalCreateUser()
    // we want to know who these users actually are.
    foreach (array('test_user1', 'test_user2', 'test_user3') as $username) {
      $edit = array(
        'name' => $username,
        'mail' => $username .'@example.com',
        'pass' => $user_password(),
        'status' => 1,
        'roles' => $this->roles,
      );
      
      $account = user_save(drupal_anonymous_user(), $edit);
      $account->pass_raw = $edit['pass'];
      
      // Save user so we can find it later.
      $this->existingUsers[] = $account;
    }
  }
  
  /**
   * Tests the user entity writer.
   */
  public function testImportUsersNoMail() {
    $writer = new iwUserWriter(array(
      'addRoles'    => array('editor', 'publisher'),
      'requireMail' => FALSE,
      'status'      => 1,
    ));
    
    // Generate 10 random users, create them
    $tests = array();
    for ($i = 0; $i < 10; ++$i) {
      
    }
    
    //$writer->save($data);
  }
}
