<?php
/**
 * @file
 * Install functions and hooks for the content flow module to manage content states
 */


/**
 * Implements HOOK_install()
 */
function csp_install() {
  $retval = db_update('system')
    ->fields(array('weight' => 50))
    ->condition('name', 'csp')
    ->execute();
}

/**
 * Implements HOOK_uninstall()
 */
function csp_uninstall() {
  $varnames = db_select('variable', 'var')
    ->fields('var', array('name'))
    ->condition('name', 'csp_%', 'LIKE')
    ->execute()->fetchCol();
  
  foreach ($varnames as $name) {
    variable_del($name);
  }
}

/**
 * Implements HOOK_schema()
 */
function csp_schema() {
  $schema['csp_flows'] = array(
    'description' => 'Contains definitions CSP workflows.',
    'fields' => array(
      'flow' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Unique identifier for this workflow.',
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'Machine name for consistent identification.',
      ),
      'label' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Friendly display name for this workflow.',
      ),
      'publishes' => array(
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'handler' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => 'CspFlow',
      ),
      'data' => array(
        'type' => 'blob',
        'serialize' => TRUE,
        'description' => 'Contains serialized state management information.',
      ),
    ),
    'primary key' => array('flow'),
    'unique keys' => array('name' => array('name')),
  );

  // List the administrators to mail / maintain.
  $schema['csp_admins'] = array(
    'description' => 'Associates users to workflows they maintain.',
    'fields' => array(
      'flow' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('flow', 'uid'),
    'foreign keys' => array(
      'workflow' => array(
        'table' => 'csp_flows',
        'columns' => array('flow' => 'flow'),
      ),
      'admin' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
    ),
  );

  // Main content relation table
  $schema['csp_entities'] = array(
    'description' => 'Contains the entity CSP state',
    'fields' => array(
      'state_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'description' => 'The type of entity that this status belongs to.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Reference to ID of the entity the state belongs to.',
      ),
      'flow' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Reference to the {csp_flows}.flow table.',
      ),
      'rev' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Reference to the revision of the entity if there is one.',
      ),
      'state' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'description' => 'The current CSP state of this entity.',
      ),
      'changed' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('state_id'),
    'unique keys' => array(
      'entity' => array('entity_type', 'entity_id', 'flow', 'rev'),
    ),
    'indexes' => array(
      'entity_state' => array('flow', 'state'),
      'change_date'  => array('changed'),
    ),
    'foreign keys' => array(
      'flows' => array(
        'table' => 'csp_flows',
        'columns' => array('flow' => 'flow'),
      ),
    ),
  );

  return $schema;
}


// ============================
// Update functions
// ============================

/**
 * Add the administrators column to workflows. This will allow
 *  for e-mails to be sent to all admins of the workflow.
 */
function csp_update_7001(&$sandbox) {
  $spec = array(
    'type' => 'varchar',
    'length' => 255,
    'not null' => TRUE,
    'default' => '',
    'description' => 'Comma separated list of administrators {user}.uid.',
  );
  if (!db_field_exists('csp', 'admins')) {
    db_add_field('csp', 'admins', $spec);
  }

  return t('Added %column column to {csp} table.', array('%column' => 'admins'));
}

/**
 * Update path from version v1 to v2 of the structure.
 */
function csp_update_7200(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    // Create the tables to use with version v2.0
    include __DIR__ .'/inserts/schema/tables-v2-0.inc';
    
    foreach ($schema as $table => $def) {
      db_create_table($table, $def);
    }
    
    $query = db_select('csp', 'csp')->fields('csp');
    foreach ($query->execute() as $flow) {
      $newFlow = new CspFlow(array(
        'label' => $flow->label,
        'name' => $flow->name,
      ));
      
      $states = unserialize($flow->states);
      foreach ($states as $name => $label) {
        $newFlow->states[$name] = array('label' => $label, 'flags' => 0);
      }
      
      if (!empty($flow->publish_state) && isset($newFlow->states[$flow->publish_state])) {
        $newFlow->states[$flow->publish_state]['flags'] |= CspFlow::FLAG_PUBLISH;
      }

      $admins = &$newFlow->getAdmins();
      $admins = user_load_multiple(explode(',', $flow->admins));
 
      $newFlow->save();
      $sandbox['flows'][$flow->csp_id] = $newFlow;
    }
    
    $sandbox['progress'] = 0;
    $sandbox['vid']      = 0;
    $sandbox['max']      = db_query('SELECT COUNT(1) FROM {csp_node}')->fetchField();
  }
  
  // Translate old CSP entries to the new format.
  $query = db_select('csp_node', 'n')
    ->fields('n')
    ->condition('vid', $sandbox['vid'], '>')
    ->range(0, 100);
  
  // Iterate through all the nodes.
  foreach ($query->execute() as $row) {
    $workflow = $sandbox['flows'][$row->csp_id];
    
    db_insert('csp_entities')
      ->fields(array(
        'entity_type' => 'node',
        'entity_id' => $row->nid,
        'rev' => $row->vid,
        'flow' => $workflow->flow,
        'state' => $row->state,
      ))->execute();
    
    $sandbox['vid'] = $row->vid;
    ++$sandbox['progress'];
  }
  
  // Check for completion and clean up.
  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  if ($sandbox['#finished'] >= 1) {
    db_drop_table('csp_workflows');
    db_drop_table('csp_node');
  }
}
