<?php
/**
 * @file iwdatalock.module
 * Contains the core Drupal HOOKs and global functionality.
 */

define('IWDATALOCK_PERM_BREAK_LOCKS', 'Break iwdatalock content locks.');

define('IWDATALOCK_VAR_LOCK_TYPE',    'iwdatalock_lock_type');
define('IWDATALOCK_VAR_DURATION',     'iwdatalock_lock_duration');
define('IWDATALOCK_VAR_DISPLAY_USER', 'iwdatalock_display_user');

/**
 * Implements HOOK_permission().
 */
function iwdatalock_permission() {
  return array(
    IWDATALOCK_PERM_BREAK_LOCKS => array(
      'title' => 'Allow forcing (breaking) content data locks.',
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements HOOK_menu(). 
 */
function iwdatalock_menu() {
  // Single handler to catch refresh, release, and
  // ping requests. $_GET variable determines which.
  return array(
    'datalock/%iwdatalock_token' => array(
      'type' => MENU_CALLBACK,
      'title' => 'Release content lock',
      'page callback' => '_iwdatalock_handle_lock_request',
      'page arguments' => array(1),
      'access callback' => TRUE,
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'file' => 'iwdatalock.pages.inc',
    ),
  );
}

/**
 * Implements HOOK_library().
 */
function iwdatalock_library() {
  $path = drupal_get_path('module', 'iwdatalock');
  
  return array(
    'datalock.timer' => array(
      'title' => 'Image Works datalock JS timer.',
      'version' => '1.0',
      'js'  => array($path .'/datalock.js' => array('group' => JS_DEFAULT)),
      'css' => array($path .'/datalock.css'),
      'dependencies' => array(
        array('iwapi', 'iwapi.ajax'),
      ),
    ),
  );
}

/**
 * Implements HOOK_form_FORM_ID_alter().
 * 
 * With FORM_ID = 'iwapi_admin_setting_form'
 */
function iwdatalock_form_iwapi_admin_setting_form_alter(&$form, &$form_state) {
  $form['iwdatalock'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Data Locking'),
    
    IWDATALOCK_VAR_LOCK_TYPE => array(
      '#type' => 'radios',
      '#title' => t('Content lock type'),
      '#options' => array('iwDbDataLock' => t('Database locks')),
      '#default_value' => variable_get(IWDATALOCK_VAR_LOCK_TYPE, 'iwDbDataLock'),
    ),
    IWDATALOCK_VAR_DURATION => array(
      '#type' => 'textfield',
      '#title' => t('Lock duration'),
      '#field_suffix' => t('seconds'),
      '#element_validate' => array('element_validate_integer_positive'),
      '#default_value' => variable_get(IWDATALOCK_VAR_DURATION, 1800),
      '#description' => t('How long are content locks created for before expiring them.'),
    ),
    IWDATALOCK_VAR_DISPLAY_USER => array(
      '#type' => 'checkbox',
      '#title' => t('Display username of the current content lock owner?'),
      '#default_value' => variable_get(IWDATALOCK_VAR_DISPLAY_USER, TRUE),
    ),
  );
}

/**
 * Determine if the URL passed token matches what was
 * generated was stored in the session for this user.
 * 
 * @param $token
 *  A built token to use to verify user was able to
 *  use token and functionality.
 * @return boolean | iwDataLock
 *  If successful, return a build iwDataLock to use
 *  with managing this locking process.
 */
function iwdatalock_token_load($token) {
  try {
    // This user has a lock, and the token matches.
    if (isset($_SESSION['iwdatalock']) && $_SESSION['iwdatalock']['token'] = $token) {
      $data = $_SESSION['iwdatalock'];
      $ttl  = variable_get(IWDATALOCK_VAR_DURATION, 1800);
      
      return iwDataLock::CreateLock($data['entity_type'], $data['entity_id'], $ttl);
    }
  }
  catch (Exception $e) {
    // Unable to create or obtain lock.
    watchdog_exception('iwdatalock', $e);
    return FALSE;
  }
}


// =================================
// Global utility functions
// =================================

/**
 * Attempt to acquire a lock for editing this entity content.
 * 
 * @param array $form
 *  Reference to form being altered. This form will have attributes
 *  added to allow the use of this datalock.
 * @param string $entity_type
 *  The entity type for which this lock will be created.
 * @param string $entity_id
 *  The unique ID of the entity which the lock is requested for.
 */
function iwdatalock_insert_lock(array &$form, $entity_type, $entity_id) {
  try {
    if (!empty($entity_id)) {
      $ttl      = variable_get(IWDATALOCK_VAR_DURATION, 1800);
      $lock     = iwDataLock::CreateLock($entity_type, $entity_id, $ttl);
      $acquired = $lock->acquire();
      
      // Acquired or not, report the status of the lock. Users are
      // have the lock or waiting for it. Both should know the time.
      $stat = (array)$lock->stat(); 
      $data = array(
        'form'      => $form['#id'],
        'remaining' => $stat['remaining'],
        'captured'  => $acquired,  // lock was acquired;
        'token'     => drupal_get_token($stat['expire'] . $stat['remaining']),
      );
      
      if (variable_get(IWDATALOCK_VAR_DISPLAY_USER, TRUE)) {
        $owner = user_load($stat['uid']);
        $data['username'] = check_plain($owner->name);
      }
      
      // Capture data that can be sent back
      $stat['token'] = $data['token'];
      $_SESSION['iwdatalock'] = $stat;
      
      // Populate the current message to the edit page.
      drupal_add_js(array('iwDatalock' => $data), 'setting');
      
      if (!$acquired) {
        foreach (element_children($form) as $element) {
          $form[$element]['#access'] = FALSE;
        }
        
        $form['iwdatalock_msg'] = array(
          '#theme_wrappers' => array('container'),
          '#weight' => -50,
          '#attributes' => array(
            'id' => 'datalock-timer',
            'class' => array('lock-message clearfix'),
          ),
          '#markup' => t(
            'Content is current being edited by another user, and you are being '.
            'prevented from making changes. The current estimated wait time is:'.
            '<div class="counter">!time</div>', array('!time' => date('i:s', $stat['remaining']))
          ),
        );
      }
      $form['#attached']['library'][] = array('iwdatalock', 'datalock.timer');
    }
  }
  catch (Exception $e) {
    watchdog_exception('iwdatalock', $e);
    drupal_set_message(t(
      'Unable to obtain a lock to protect your access, refresh to try again or if you '.
      'do not believe anyone will clobber your changes you can continue.'), 'warning'
    );
  }
}

/**
 * Validate a datalock by ensuring that it can be captured
 * or owned by this user, otherwise catch and report an error.
 * 
 * @param array $form
 *  The form structure definition of the content being rendered.
 * @param string $entity_type
 *  The type of entity that is being edited.
 * @param string $entity_id
 *  The unique ID of the entity being altered.
 */
function iwdatalock_insert_lock_validate(array $form, $entity_type, $entity_id) {
  if ($lock = iwDataLock::CreateLock($entity_type, $entity_id)) {
    if ($lock->acquire()) {
      return;
    }
    
    $stat = $lock->stat();
    $h = intval($stat->remaining / 60);
    $m = $stat->remaining % 60;
    if ($m < 10) {
      $m = '0'. $m;
    }
    
    form_error($form, t(
      'This content is currently being edited by another user and is protected '.
      'from changes for another %time minutes.', array('%time' => "{$h}:{$m}")
    ));
  }
  
  form_error($form, t('Failed to ensure that it is safe to edit this content.'));
  watchdog('iwdatalock', 'Unable to create a content lock for %type : %id',
    array('%type' => $entity_type, '%id' => $entity_id)
  );
}
