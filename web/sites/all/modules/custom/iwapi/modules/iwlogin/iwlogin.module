<?php
/**
 * @file iwlogin.module
 * Core Drupal hooks for general user and login enhancements.
 */

// Login behavior
define('IWLOGIN_VAR_LOGIN_REDIRECT', 'iwlogin_override_login_redirect');
define('IWLOGIN_VAR_DESTINATION',    'iwlogin_default_destination');
define('IWLOGIN_VAR_FORCE_HTTPS',    'iwlogin_always_use_https');
define('IWLOGIN_VAR_DBL_REGISTER_EMAIL', 'iwlogin_use_email_double_entry');


// Logged in behaviors
define('IWLOGIN_VAR_LOGIN_TEXT',  'iwlogin_login_text_parts');
define('IWLOGIN_VAR_USER_LINKS',  'iwlogin_user_addl_links');
define('IWLOGIN_VAR_ADDL_LOGOUT', 'iwlogin_addl_logout');
define('IWLOGIN_VAR_USER_TABS', 'iwlogin_user_tab_labels');


// ==========================
// Drupal Core HOOKs
// ==========================

/**
 * Implements HOOK_flush_caches()
 */
function iwlogin_flush_caches() {
  $text = variable_get(IWLOGIN_VAR_LOGIN_TEXT, array());
  unset($text['rendered']);
  variable_set(IWLOGIN_VAR_LOGIN_TEXT, $text);
}

/**
 * Implements HOOK_menu()
 */
function iwlogin_menu() {
  return array(
    'admin/config/people/iwlogin' => array(
      'title' => 'IW User Enhancements',
      'description' => 'Manage setting for Image Works user blocks, login and settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_iwlogin_admin_settings_form'),
      'access arguments' => array('administer users'),
      'file' => 'iwlogin.admin.inc',
    ),
    'admin/config/people/iwlogin/settings' => array(
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'title' => 'Login behavior',
      'weight' => 0,
    ),
    'admin/config/people/iwlogin/user-links' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'User links',
      'description' => 'Manage links additional links user see when logged in.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_iwlogin_user_links_form'),
      'access arguments' => array('administer users'),
      'file' => 'iwlogin.admin.inc',
    ),
    'admin/config/people/iwlogin/tab-labels' => array(
      'type' => MENU_LOCAL_TASK,
      'title' => 'User tabs',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('iwlogin_user_tab_label_form'),
      'access arguments' => array('administer users'),
      'file' => 'iwlogin.admin.inc',
      'description' => 'Customize l',
    ),

    'iwlogin/ajax/form' => array(
      'type' => MENU_CALLBACK,
      'title' => 'User Login',
      'page callback' => '_iwlogin_ajax_form',
      'access callback' => TRUE,
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'file' => 'iwlogin.pages.inc',
    ),
    'iwlogin/iframe/page' => array(
      'type' => MENU_CALLBACK,
      'page callback' => '_iwlogin_iframe_login_page',
      'access callback' => TRUE,
      'file' => 'iwlogin.pages.inc',
    ),
    'iwlogin/iframe/ajax' => array(
      'type' => MENU_CALLBACK,
      'title' => 'User Login',
      'page callback' => '_iwlogin_iframe_login_ajax',
      'access callback' => TRUE,
      'delivery callback' => 'ajax_deliver',
      'theme callback' => 'ajax_base_page_theme',
      'file' => 'iwlogin.pages.inc',
    ),
  );
}

/**
 * Implements HOOK_block_info()
 */
function iwlogin_block_info() {
  return array(
    'user' => array(
      'info' => t('IW User Login'),
      'cache' => DRUPAL_NO_CACHE,
    ),
  );
}

/**
 * Implements HOOK_block_view()
 */
function iwlogin_block_view($delta) {
  global $user;

  $options = array('html' => FALSE, 'attributes' => array('rel' => 'nofollow'));
  if ($user->uid > 0) {
    $options['attributes']['class'] = array('user-links');
    $content[0] = 'Welcome '. l($user->name, "user/$user->uid", $options) .'!';

    if (variable_get(IWLOGIN_VAR_ADDL_LOGOUT, TRUE)) {
      $content[0] .= ' <span class="not-user">('. l('not '. $user->name, 'user/logout', $options) .'?)</span>';
    }
    
    $data       = array('user' => $user);
    $token_opts = array('sanitize' => FALSE);

    // Add additional user links setup in the administration settings.
    $links = variable_get(IWLOGIN_VAR_USER_LINKS, array()) + array('logout' => array('text' => 'Sign Out'));
    $links['logout']['path'] = 'user/logout';

    foreach ($links as $link) {
      if (!empty($link['path'])) {
        $path = token_replace($link['path'], $data, $token_opts);
        $content[] = l($link['text'], $path, $options + $link);
      }
    }
    $content = array(
      '#theme' => 'item_list',
      '#items' => $content,
      '#options' => array('html' => FALSE),
      '#attributes' => array('class' => array('links', 'inline', 'clearfix')),
    );
  }
  else {
    drupal_add_library('system', 'jquery.form');
    drupal_add_library('iwapi', 'iwapi.ajax');
    drupal_add_js(drupal_get_path('module', 'iwlogin') .'/js/iwlogin.js');

    // Tell the JS scripts if we need to enforce SSL logins.
    drupal_add_js(array('iwLogin' => array('forceHttps' => (bool)variable_get(IWLOGIN_VAR_FORCE_HTTPS, FALSE))), 'setting'); 

    // Build the actual login prompt from the various components.
    // Passing a renderable array allows theme functions full control
    // over how this prompt gets built.
    $text = variable_get(IWLOGIN_VAR_LOGIN_TEXT, array());
    if (empty($text['rendered'])) {
      $text += array(
        'signin' => 'Sign In',
        'site_text' => 'to [site:name] or',
        'register' => 'Create an Account',
      );

      // Default link options
      $options['attributes'] = array(
        'class' => array('login-links'),
        'rel' => 'nofollow',
      );

      $content = ' '. filter_xss_admin($text['site_text']);
      if (variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)) {
        $content .= ' '. l($text['register'], 'user/register', $options);
      }

      // Add a special class to make sure this is always caught.
      $options['attributes']['class'][] = 'iwlogin_signin_link';
      $content =  l($text['signin'], 'user/login', $options) . $content;

      // Apply any site tokens to the content, and then cache the result for next time
      $text['rendered'] = token_replace($content);
      variable_set(IWLOGIN_VAR_LOGIN_TEXT, $text);
    }
    $content = $text['rendered'];
  }
  return array('subject' => '', 'content' => $content);
}

/**
* Implements hook_menu_link_alter()
*/
function iwlogin_menu_alter(&$items) {  
  $labels = variable_get(IWLOGIN_VAR_USER_TABS, array());
  
  foreach (array_filter($labels) as $tab => $label) {
    $key = "user/%user/$tab";
      
    if (array_key_exists($key, $items)) {
      $items[$key]['title callback'] = '_iwlogin_user_tabs_title_callback';
      $items[$key]['title arguments'] = array($label, 1);
    }
  }
  
  if (!empty($labels['view'])) {
    $items['user/%user']['title callback']  = $items['user/%user/view']['title callback'];
    $items['user/%user']['title arguments'] = $items['user/%user/view']['title arguments'];
  }
  
  // Login links 
  $items['user/login']['title'] = t('Login');
  $items['user/register']['title'] = t('Create a Login');
  $items['user/password']['title'] = t('Forgot Password');

  // Rearrange the anonymous user tabs.
  $base_weight = isset($items['user/register']['weight']) ? $items['user/register']['weight'] : 0;
  $items['user/login']['weight'] = $base_weight++;
  $items['user/password']['weight'] = $base_weight++;
}

/**
 * Implements HOOK_form_alter()
 */
function iwlogin_form_alter(&$form, &$form_state, $form_id) {
  global $is_https;

  // In case this form is derived from one of our protected user forms.
  if (isset($form_state['build_info']['base_form_id'])) {
    $form_id = $form_state['build_info']['base_form_id'];
  }

  // Force HTTPS login, registration and other user forms.
  switch ($form_id) {
    case 'user_login_block':
      $site_name = variable_get('site_name', 'Drupal');
      $form['name']['#description'] = t('Enter your @s username.', array('@s' => $site_name));
      $form['pass']['#description'] = t('Enter the password that accompanies your username.');
      $form['links']['#weight'] = 110; // puts it after actions.
    case 'user_login':
      $form['#attributes']['class'][] = 'user-login';
      
      if (variable_get(IWLOGIN_VAR_LOGIN_REDIRECT, FALSE)) {
        if (empty($form['#submit'])) {
          $form['#submit'] = array('user_login_submit');
        }
        $form['#submit'][] = '_iwlogin_user_login_redirect_submit';
      }
      
    case 'user_pass':
    case 'user_pass_reset':
    case 'user_register_form':
      if (variable_get(IWLOGIN_VAR_FORCE_HTTPS, FALSE) && !$is_https) {
        $options = array('query' => drupal_get_query_parameters(), 'https' => TRUE);
        // Ignore the destination for this redirect (it was preserved in the query).
        unset($_GET['destination']);
        drupal_goto($_GET['q'], $options, 301);
      }
      break;

    case 'user_admin_settings':
      $form['registration_cancellation']['user_register']['#weight'] = -5;
      
      $form['registration_cancellation'][IWLOGIN_VAR_DBL_REGISTER_EMAIL] = array(
        '#type' => 'checkbox',
        '#title' => t('Include a second e-mail confirmation text field'),
        '#default_value' => variable_get(IWLOGIN_VAR_DBL_REGISTER_EMAIL, FALSE),
        '#weight' => -1,
      );
      
      $form['user_failed_login'] = array(
        '#type' => 'fieldset',
        '#title' => t('Failed Login Attempts'),
        '#tree' => FALSE,
        '#weight' => 1,
    
        'user_failed_login_user_limit' => array(
          '#type' => 'textfield',
          '#title' => t('Failed login per user limit'),
          '#size' => 16,
          '#field_suffix' => t('attempts'),
          '#validate' => array('element_validate_integer_positive'),
          '#default_value' => variable_get('user_failed_login_user_limit', 5),
        ), 
        'user_failed_login_user_window' => array(
          '#type' => 'textfield',
          '#title' => t('Failed login IP expiration'),
          '#size' => 16,
          '#field_suffix' => t('seconds'),
          '#validate' => array('element_validate_integer_positive'),
          '#default_value' => variable_get('user_failed_login_user_window', 21600),
        ),
        'user_failed_login_ip_limit' => array(
          '#type' => 'textfield',
          '#title' => t('Failed login IP limit'),
          '#size' => 16,
          '#field_suffix' => t('attempts'),
          '#validate' => array('element_validate_integer_positive'),
          '#default_value' => variable_get('user_failed_login_ip_limit', 50),
        ),
        'user_failed_login_ip_window' => array(
          '#type' => 'textfield',
          '#title' => t('Failed login IP expiration'),
          '#size' => 16,
          '#field_suffix' => t('seconds'),
          '#validate' => array('element_validate_integer_positive'),
          '#default_value' => variable_get('user_failed_login_ip_window', 3600),
          '#description' => t('Amount of time in seconds before failed login attempts expire.'),
        ),
      ); 
      break;
  }
  
  if (variable_get(IWLOGIN_VAR_DBL_REGISTER_EMAIL, FALSE) && $form_id === 'user_register_form') {
    $form['account']['mail']['#type'] = 'email_confirm';
  }
}

/**
 * User login submit callback to set the IW Login destination
 * as the redirect URL.
 */
function _iwlogin_user_login_redirect_submit($form, &$form_state) {
  $redirect = variable_get(IWLOGIN_VAR_DESTINATION, '');
  if (!empty($redirect)) {
    $form_state['redirect'] = $redirect;
  }
  else {
    unset($form_state['redirect']);
  }
}

/**
 * Implements HOOK_form_[form_id]_alter()
 */
function iwlogin_form_user_register_form_alter(&$form, &$form_state) {
  if (user_is_anonymous() && request_path() == 'user/register') {
    drupal_set_title(token_replace('Sign Up With [site:name]'));
    $form['actions']['submit']['#value'] = t('Create Login');
  }
}

/**
 * Implements HOOK_contextual_links_view_alter()
 */
function iwlogin_contextual_links_view_alter(&$element, $items) {
  // Prevents the contextual link from getting displayed on our custom login.
  if (isset($element['#element']['#block'])) {
    $block = &$element['#element']['#block'];
    if ($block->module == 'iwlogin' && $block->delta == 'user') {
      unset($element['#links']);
    }
  }
}

/**
 * Callback to resolve tokens before displaying them as a
 * page title.
 * 
 * @param string $text
 *  String possible containing tokens. This is the basis
 *  and template for creating the title.
 * @param stdClass $account
 *  Fully loaded user account. This should be the user
 *  that the tabs are being displayed for.
 */
function _iwlogin_user_tabs_title_callback($text, $account) {
  return token_replace(
    $text,
    array('user' => $account),
    array('sanitize' => FALSE, 'clear' => TRUE)
  );
}
