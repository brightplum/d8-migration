<?php
/**
 * @file
 * Core Drupal HOOKs and global utilities.
 */

/**
 * Implements HOOK_cron().
 */
function views_term_alias_cron() {
  $rs = db_select('taxonomy_term_data', 'td')
    ->fields('td', array('tid', 'name'))
    ->condition('alias', '')
    ->range(0, 50)
    ->execute();
  
  while ($term = $rs->fetchObject()) {
    $alias = _views_term_alias_generate($term->tid, $term->name);
    
    db_update('taxonomy_term_data')
      ->fields(array('alias' => $alias))
      ->condition('tid', $term->tid)
      ->execute();
  }
}

/**
 * Implements HOOK_views_api().
 */
function views_term_alias_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'views_term_alias') .'/views',
  );
}

/**
 * Implements HOOK_term_presave().
 * Will add a generated alias before term is saved.
 */
function views_term_alias_taxonomy_term_presave($term) {
  $term->alias = _views_term_alias_generate($term->tid, $term->name);
}


// ============================
// Global utilities.
// ============================

function _views_term_alias_generate($tid, $name) {
  module_load_include('inc', 'pathauto', 'pathauto') ;
  
  $alias = pathauto_cleanstring($name);
  
  // Find all existing aliases that are similar.
  $existing = db_select('taxonomy_term_data', 'td')
    ->fields('td', array('alias'))
    ->condition('tid', $tid, '<>')
    ->condition(db_or()
      ->condition('alias', db_like($alias), 'LIKE')
      ->condition('alias', db_like($alias) .'-%', 'LIKE')
    )->execute()->fetchCol();
  
  $keyed = array_flip($existing);
  if (!empty($keyed) && key_exists($alias, $keyed)) {
    $count = 0;
    
    // While there are alias collisions, increment a count number.
    while (key_exists("{$alias}-{$count}", $keyed)) {
      ++$count;
    }
    $alias = "{$alias}-{$count}";
  }

  return $alias;
}
