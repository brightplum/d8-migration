<?php
/**
 * @file tuckaway_header.module
 * Drupal core hooks and global utility functions.
 */

define('TUCKAWAY_HEADER_VAR_REGION', 'tuckaway_header_region_name');
define('TUCKAWAY_HEADER_VAR_TYPES',  'tuckaway_header_entity_types');


// ===============================
// Drupal HOOK implementations
// ===============================

/**
 * Implement HOOK_menu(). 
 */
function tuckaway_header_menu() {
  return array(
    'admin/config/search/tuckaway-header' => array(
      'title' => 'Tuckaway Headers',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('tuckaway_header_settings_form'),
      'access arguments' => array('administer site configuration'),
      'file' => 'tuckaway_header.admin.inc',
      'description' => 'Allow the management of tuckaway headers for entity pages.',
    ),
  );
}

/**
 * Implements HOOK_entity_insert().
 */
function tuckaway_header_entity_insert($entity, $entity_type) {
  list($idVal) = entity_extract_ids($entity_type, $entity);
  
  if (!empty($idVal) && isset($entity->tuckaway_text)) {
    try {
      $data = array(
        'entity_type' => $entity_type,
        'entity_id' => $idVal,
        'text' => $entity->tuckaway_text,
      );
      
      $rows = db_insert('tuckaway_headers')
        ->fields($data)
        ->execute();
    }
    catch (Exception $e) {
      $msg = 'Insert tuckaway for %title [%type]: !message in %function (line %line of %file).';
      watchdog_exception('MyVice', $e, $msg, array('%title' => entity_label($entity_type, $entity)));
    }
  }
}

/**
 * Implements HOOK_entity_update().
 */
function tuckaway_header_entity_update($entity, $entity_type) {
  list($idVal) = entity_extract_ids($entity_type, $entity);

  if (!empty($idVal) && isset($entity->tuckaway_text)) {
    try {
      $data = array(
        'entity_type' => $entity_type,
        'entity_id' => $idVal,
        'text' => $entity->tuckaway_text,
      );
      
      // First try to update, but if that fails then do an insert.
      // Assumption being that updates will occur here a lot more than inserts.
      $rows = db_merge('tuckaway_headers')
        ->key(array('entity_type' => $entity_type, 'entity_id' => $idVal))
        ->fields($data)
        ->updateFields(array('text' => $data['text']))
        ->execute();
    }
    catch (Exception $e) {
      $msg = 'Update tuckaway for %title [%type]: !message in %function (line %line of %file).';
      watchdog_exception('MyVice', $e, $msg, array('%title' => entity_label($entity_type, $entity)));
    }
  }
}

/**
 * Implements HOOK_entity_delete().
 */
function tuckaway_header_entity_delete($entity, $entity_type) {
  list($idVal) = entity_extract_ids($entity_type, $entity);
  
  db_delete('tuckaway_headers')
    ->condition('entity_type', $entity_type)
    ->condition('entity_id', $idVal)
    ->execute();
}

/**
 * Implements HOOK_entity_view().
 */
function tuckaway_header_entity_view($entity, $type, $view_mode, $langcode) {
  
}

/**
 * Implements HOOK_form_alter().
 */
function tuckaway_header_form_alter(&$form, &$form_state, $form_id) {
  global $tuckaway_hide;
  
  $form_ids = array();
  $tuckaway_info = _tuckaway_header_get_tuckaway_info();
  
  foreach ($tuckaway_info as $entity_type => $info) {
    $form_ids[$info['form_id']] = $entity_type;
  }
  
  if (isset($form_ids[$form_id])) {
    $entity_type = $form_ids[$form_id];
  }
  elseif (isset($form_state['build_info']['base_form_id']) && isset($form_ids[$form_state['build_info']['base_form_id']])) {
    $entity_type = $form_ids[$form_state['build_info']['base_form_id']];
  }
  else {
    return; // Not a recognized form, oust the results.
  }
  
  $tuckaway_hide = TRUE; // Hide the tuckaway on edit forms.
  $info   = $tuckaway_info[$entity_type];
  $entity = $form[$info['form_element']];
    
  $text = _tuckaway_header_get_tuckaway_text($entity, $entity_type, TRUE);
  $form['tuckaway_header'] = array(
    '#type' => 'fieldset',
    '#title' => t('Tuckaway Header Title'),
    '#group' => 'additional_settings',
    '#tree' => FALSE,
    '#weight' => -5,
      
    'tuckaway_text' => array(
      '#type' => 'textfield',
      '#title' => t('Tuckaway text'),
      '#default_value' => empty($text) ? '' : $text,
      '#description' => t('Keywords used as H1 at top of page.'),
      '#maxlength' => 255,
    ),
  );

  // Determine what entity tokens might be available for use.
  $token_type  = isset($info['token_type']) ? $info['token_type'] : $type;
  
  $form['tuckaway_header']['tokens'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array($token_type),
    '#dialog' => TRUE,
  );
}

/**
 * Implements HOOK_page_alter().
 */
function tuckaway_header_page_alter(&$page) {
  global $theme, $tuckaway_hide;
  $regions = system_region_list($theme);
   
  $router_item = menu_get_item();
  if (!empty($tuckaway_hide) || empty($router_item['load_functions']) || !is_array($router_item['load_functions'])) {
    return;
  }

  // Based on the menu router information, can we determine which entity page is being delivered.
  $types = variable_get(TUCKAWAY_HEADER_VAR_TYPES, array('node' => TRUE));
  foreach ($router_item['load_functions'] as $pos => $func) {
    $name = substr($func, 0, -5);
    if (isset($types[$name]) && !empty($router_item['map'][$pos])) {
      $entity_type = $name;
      $entity = $router_item['map'][$pos];
      
      // If one of these entity types, make sure we pull the correct type
      if ($entity instanceof iwEntity || $entity instanceof Entity) {
        $entity_type = $entity->entityType();
      }
      break;
    }
  }
  
  // If an appropriate entity was found in the menu, try to render it
  if (isset($entity) && ($text = _tuckaway_header_get_tuckaway_text($entity, $entity_type))) {
    $entity_info = entity_get_info($entity_type);
    $token_type  = isset($entity_info['token type']) ? $entity_info['token type'] : $entity_type;
    
    $text       = check_plain($text);
    $data       = array($token_type => $entity);
    $token_opts = array('clear' => TRUE);

    $region = variable_get(TUCKAWAY_HEADER_VAR_REGION, 'page_top');
    if (!isset($regions[$region])) {
      $region = 'page_top';
    }
      
    if (!isset($page[$region])) {
      $page[$region] = array(
        '#theme_wrappers' => array('region'),
        '#region' => $region,
      );
    }

    $page[$region] = array(
      'tuckaway_header' => array(
        '#type' => 'html_tag',
        '#tag' => 'h1',
        '#value' => token_replace($text, $data, $token_opts),
        '#attributes' => array('class' => array('tuckaway-header')),
        '#weight' => -99,
      ),
    ) + $page[$region];
  }
}


// ===========================
// Tuckaway utilities
// ===========================

/**
 * Check the database for the current tuckaway text,
 * and return it if found.
 * 
 * @param object $entity
 *  The actual entity object to locate the H1 text for.
 * @param string $entity_type
 *  Entity type to use for this entity.
 * @return string|boolean
 *  Returns the stored H1 text for the requested entity
 *  if it was found, otherwise, a boolean FALSE is returned.
 */
function _tuckaway_header_get_tuckaway_text($entity, $entity_type, $use_default = FALSE) {
  $text = FALSE;
  
  list($idVal) = entity_extract_ids($entity_type, $entity);
  if (!empty($idVal)) {
    $text = db_select('tuckaway_headers', 'h1')
      ->fields('h1', array('text'))
      ->condition('entity_type', $entity_type)
      ->condition('entity_id', $idVal)
      ->range(0, 1)
      ->execute()->fetchField();
  }
  
  // $text is empty, and not an empty string use the default callback to get a value.
  if ($use_default && empty($text) && !is_string($text)) {
    $info = _tuckaway_header_get_tuckaway_info();
    $callback = $info[$entity_type]['default_callback'];
    
    $text = ($callback && function_exists($callback)) ? $callback($entity, $entity_type) : FALSE;
  }
  return $text;
}

/**
 * Find information about the different entity forms
 * which could have a tuckaway header on display pages.
 * This is used to describe where the entity might be found
 * within a form, its type and what tokens are allowed.
 * 
 * @return array
 *  Information array indexed by the form_id, which gives
 *  general information on how the form should include
 *  the tuckaway header information.
 */
function _tuckaway_header_get_tuckaway_info($reset = FALSE) {
  $tuckaway_info = &drupal_static(__FUNCTION__, NULL, $reset);
  
  if (!isset($tuckaway_info)) {
    $cid = 'tuckaway_header:entity_info';
    if (!$reset && $cache = cache_get($cid)) {
      $tuckaway_info = $cache->data;
    }
    else {
      $tuckaway_info = module_invoke_all('tuckaway_header_info') + array(
        'node' => array(
          'default_callback' => FALSE,
          'form_id' => 'node_form',
          'form_element' => '#node',
          'token_type' => 'node',
        ),
      );
      
      // Alter and store the current tuckaway information. 
      drupal_alter('tuckaway_header_info', $tuckaway_info);
      cache_set($cid, $tuckaway_info);
    }
  }
  return $tuckaway_info;
}
