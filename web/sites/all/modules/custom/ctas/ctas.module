<?php
/**
 * @file
 * Functionality for the Call To Actions.
 */

// @TODO: Admin setting to define which regions can be used as CTA containers.
// @TODO: Add block settings form to enable a block as a CTA.
// @TODO: Add reporting and analytics for how a CTA is performing.
// @TODO: Add A/B testing.

function ctas_menu() {
  $items['donate'] = [
    'title' => 'Donate',
    'page callback' => 'donate_page',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK
  ];
  return $items;
}

/**
 * Menu Callback: Donate Page.
 */
function donate_page() {
  global $conf;

  $form = drupal_get_form('ctas_donate_form');
  $stripe_pub_key = $conf['stripe_public'];

  return [
    '#theme' => 'cta_donate_content',
    '#form' => $form,
    '#attached' => [
      'js' => [
        'https://checkout.stripe.com/checkout.js' => ['preprocess' => FALSE, 'every_page' => FALSE, 'external' => TRUE, 'scope' => 'header'],
        [
          'data' => [
            'stripe_pub_key' => $stripe_pub_key,
          ],
          'type' => 'setting',
          'scope' => 'footer'
        ],
        drupal_get_path('module', 'ctas') . '/js/cta-donate-page.js' => ['scope' => 'footer']
      ],
      'css' => [
        drupal_get_path('module', 'ctas') . '/css/cta-donate-page.css'
      ]
    ]
  ];
}

/**
 * Implements hook_token_info().
 */
function ctas_token_info() {
  $info['tokens']['cta']['content_block_template_one'] = array(
    'name' => t('Content Block Template One'),
    'description' => t('Renders the Content Block Template One CTA.'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 */
function ctas_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  if ($type == 'cta') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'content_block_template_one':
          $result = db_query('SELECT * from {ctas} WHERE display = :display', [
            ':display' => 'content_block_one'
          ])->fetchAssoc();
          if ($result) {
            $block_data = block_load('block',$result['delta']);
            $block = module_invoke('block', 'block_view', $result['delta']);
            $content = [
              '#theme' => 'cta_content_block_one',
              '#title' => $block_data->title,
              '#content' => $block['content']
            ];
            $replacements[$original] = render($content);
          }

          break;

        case 'content_block_template_one_alt':
          $result = db_query('SELECT * from {ctas} WHERE display = :display', [
            ':display' => 'content_block_one_alt'
          ])->fetchAssoc();
          if ($result) {
            $block_data = block_load('block',$result['delta']);
            $block = module_invoke('block', 'block_view', $result['delta']);
            $content = [
              '#theme' => 'cta_content_block_one_alt',
              '#title' => $block_data->title,
              '#content' => $block['content']
            ];
            $replacements[$original] = render($content);
          }

          break;

        case 'content_block_template_two':
          $result = db_query('SELECT * from {ctas} WHERE display = :display', [
            ':display' => 'content_block_two'
          ])->fetchAssoc();
          if ($result) {
            $block_data = block_load('block',$result['delta']);
            $block = module_invoke('block', 'block_view', $result['delta']);
            $content = [
              '#theme' => 'cta_content_block_two',
              '#title' => $block_data->title,
              '#content' => $block['content']
            ];
            $replacements[$original] = render($content);
          }

          break;
      }
    }
  }

  return $replacements;
}

/**
 * Implements hook_block_info().
 */
function ctas_block_info() {
  $blocks = [];
  $blocks['cta_modal_winter_2017'] = array(
    'info' => t('CTA Modal Winter 2017'),
  );
  $blocks['cta_fundraiser_gauge_sidebar'] = array(
    'info' => t('CTA Sidebar: Fundraiser Gauge'),
    'cache' => DRUPAL_NO_CACHE
  );
  $blocks['cta_fundraiser_gauge_slide_down'] = array(
    'info' => t('CTA Slide Down: Fundraiser Gauge'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ctas_block_view($delta = NULL) {
  $block = [];

  switch($delta) {
    case 'cta_modal_winter_2017' :
      $content = variable_get('cta_modal_winter_2017_content', '');
      $block['content'] = theme('cta_modal_winter_2017_block', ['content' => $content]);
      break;

    case 'cta_fundraiser_gauge_sidebar' :
      $content = variable_get('cta_fundraiser_gauge_sidebar_content', '');
      $block['content'] = theme('cta_fundraiser_gauge_sidebar', [
        'content' => $content,
        'max' => variable_get('cta_fundraiser_gauge_sidebar_max', 0),
        'current' => variable_get('cta_fundraiser_gauge_sidebar_current', 0),
        'raised' => variable_get('cta_fundraiser_gauge_sidebar_raised', NULL)
      ]);
      break;

    case 'cta_fundraiser_gauge_slide_down' :
      $content = variable_get('cta_fundraiser_gauge_slide_down_content', '');
      $block['content'] = theme('cta_fundraiser_gauge_slide_down', [
        'content' => $content,
        'max' => variable_get('cta_fundraiser_gauge_slide_down_max', 0),
        'current' => variable_get('cta_fundraiser_gauge_slide_down_current', 0),
      ]);
      break;
  }

  return $block;
}

/**
 * Implements hook_block_configure().
 */
function ctas_block_configure($delta='') {
  $form = array();

  switch($delta) {
    case 'cta_modal_winter_2017' :
      // Text1 field form element
      $form['text_body'] = array(
        '#type' => 'text_format',
        '#title' => t('Content'),
        '#format' => 'full_html',
        '#default_value' => variable_get('cta_modal_winter_2017_content', ''),
      );

      break;

    case 'cta_fundraiser_gauge_slide_down' :
    case 'cta_fundraiser_gauge_sidebar' :
      // Text field form element
      $form['text_body'] = array(
        '#type' => 'text_format',
        '#title' => t('Content'),
        '#format' => 'full_html',
        '#default_value' => variable_get($delta . '_content', ''),
      );
      $form['gauge'] = [
        '#type' => 'fieldset',
        '#title' => t('Fundraising Gauge'),
      ];
      $form['gauge']['max'] = [
        '#type' => 'textfield',
        '#title' => t('Fundraiser Max Goal'),
        '#attributes' => array(
          ' type' => 'number', // insert space before attribute name :)
        ),
        '#required' => true,
        '#maxlength' => 7,
        '#default_value' => variable_get($delta . '_max', 0),
        '#description' => t('Do not include dollar sign ($). Use just numeric values, for example <em>1234.50</em>')
      ];
      $form['gauge']['current'] = [
        '#type' => 'textfield',
        '#title' => t('Fundraiser Current Value'),
        '#attributes' => array(
          ' type' => 'number', // insert space before attribute name :)
        ),
        '#required' => true,
        '#maxlength' => 7,
        '#default_value' => variable_get($delta . '_current', 0),
        '#description' => t('Do not include dollar sign ($). Use just numeric values, for example <em>1234.50</em>')
      ];
      $form['gauge']['raised'] = [
        '#type' => 'textfield',
        '#title' => t('Fundraiser amount raised text'),
        '#default_value' => variable_get($delta . '_raised', ''),
        '#description' => t('Text in here displays below the progress bar.')
      ];

      break;
    case 'cta_mobile_content_parallax':
      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function ctas_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'cta_modal_winter_2017':
      // Saving the WYSIWYG text
      variable_set('cta_modal_winter_2017_content', $edit['text_body']['value']);
      break;

    case 'cta_fundraiser_gauge_slide_down' :
    case 'cta_fundraiser_gauge_sidebar':
      // Saving the WYSIWYG text
      variable_set($delta . '_content', $edit['text_body']['value']);
      variable_set($delta . '_max', $edit['max']);
      variable_set($delta . '_current', $edit['current']);
      variable_set($delta . '_raised', $edit['raised']);
      break;
  }
}

/**
 * FORM: Donate Page Form.
 */
function ctas_donate_form($form, &$form_state) {
  $form = [];
  $form['stripeToken'] = [
    '#type' => 'hidden',
    '#attributes' => [
      'id' => 'stripeToken'
    ]
  ];
  $form['stripeAmount'] = [
    '#type' => 'hidden',
    '#attributes' => [
      'id' => 'stripeAmount'
    ]
  ];
  $form['stripeDonationType'] = [
    '#type' => 'hidden',
    '#attributes' => [
      'id' => 'stripeDonationType'
    ]
  ];
  $form['stripeMeta'] = [
    '#type' => 'hidden',
    '#attributes' => [
      'id' => 'stripeDonationType'
    ]
  ];

  $form['submit'] = [
    '#type' => 'submit',
    '#value' => 'Save',
    '#attributes' => [
      'style' => 'display: none'
    ]
  ];
  return $form;
}

/**
 * FORM SUBMIT: Donate Page Form.
 */
function ctas_donate_form_submit($form, &$form_state) {
  $token = json_decode($form_state['values']['stripeToken']);

  if (!$token || empty($form_state['values']['stripeToken']) || empty($form_state['values']['stripeAmount']) || empty($form_state['values']['stripeDonationType'])) {
    drupal_set_message("There was an error processing your donation, please try again. No token, type and/or amount found.", "error");
    $form_state['redirect'] = [
      'donate',
      [
        'query' => [
          'success' => '0'
        ]
      ]
    ];
    return;
  }
  else {
    global $conf;

    $stripe_api_key = $conf['stripe_secret'];
    \Stripe\Stripe::setApiKey($stripe_api_key);
    $donationType = $form_state['values']['stripeDonationType'];
    $cta_location = isset($_GET['cta-location']) ? $_GET['cta-location'] : 'unknown';
    $campaign = isset($_GET['campaign']) ? $_GET['campaign'] : 'unknown';

    // One Time.
    if (!empty($form_state['values']['stripeDonationType']) && $form_state['values']['stripeDonationType'] == 'once') {
      try {
        // Change.
        $charge = \Stripe\Charge::create([
          'amount' => $form_state['values']['stripeAmount'],
          'currency' => 'usd',
          'description' => 'One time donation from ' . $token->email,
          'source' => $token->id,
          'metadata' => [
            'campaign' => $campaign,
            'cta_location' => $cta_location,
          ],
          'receipt_email' => $token->email,
        ]);
        $form_state['redirect'] = [
          current_path(),
          [
            'query' => [
              'success' => '1'
            ]
          ]
        ];

      }
      catch (Exception $e) {
        drupal_set_message("There was an error processing your donation: " . $e->getMessage(), 'error');
        $form_state['redirect'] = [
          current_path(),
          [
            'query' => [
              'success' => '0'
            ]
          ]
        ];
        return;
      }
    }

    // Check if this is a subscription.
    elseif (!empty($form_state['values']['stripeDonationType']) && $form_state['values']['stripeDonationType'] == 'monthly') {

      try
      {
        $customer = \Stripe\Customer::create([
          'email' => $token->email,
          'source'  => $token->id,
        ]);

        $plan_name = str_replace("@", "-",$token->email) . "_monthly_donation_" . time();
        $plan = \Stripe\Plan::create([
          "amount" => $form_state['values']['stripeAmount'],
          "interval" => "month",
          "product" => [
            "name" => "Recurring donation for " . $token->email
          ],
          "currency" => "usd",
          "id" => $plan_name
        ]);
        $subscription = \Stripe\Subscription::create([
          "customer" => $customer->id,
          "items" => [
            [
              'plan' => $plan_name
            ],
          ],
        ]);
        $form_state['redirect'] = [
          current_path(),
          [
            'query' => [
              'success' => '1',
              'campaign' => '2'
            ]
          ]
        ];
      }
      catch(Exception $e)
      {
        drupal_set_message("There was an error processing your donation: " . $e->getMessage(), 'error');
        $form_state['redirect'] = [
          current_path(),
          [
            'query' => [
              'success' => '0'
            ]
          ]
        ];
        return;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function ctas_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'block_admin_configure' || $form_id == 'block_add_block_form') {
    $block = block_load($form['module']['#value'], $form['delta']['#value']);

    if (isset($block->delta)) {
      $result = db_query('SELECT * from {ctas} WHERE delta = :delta AND module = :module', [
        ':delta' => $block->delta,
        ':module' => $block->module
      ])->fetchAssoc();
      if ($result) {
        $block->cta = $result;
      }
      $form['#block'] = $block;
    }


    // CTA settings.
    $form['cta_settings'] = [
      '#type' => 'fieldset',
      '#title' => t('CTA Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#weight' => 10,
    ];
    $form['cta_settings']['cta_enabled'] = [
      '#type' => 'checkbox',
      '#title' => t('Enable this block as a CTA'),
      '#default_value' => isset($block->cta) ? $block->cta['status'] : NULL
    ];
    $form['cta_settings']['display_options'] = [
      '#type' => 'select',
      '#title' => t('Display Options'),
      '#options' => [
        'super_header' => t('Super Header'),
        'slide_down_from_top' => t('Slide down from top of the page'),
        'slide_up_from_bottom' => t('Slide up from the bottom of the page'),
        'slide_up_from_bottom_signup' => t('Slide up from the bottom of the page with form'),
        'modal_popup' => t('Modal'),
        'content_block_one' => t('Content Block Template One (Simple Yellow)'),
        'content_block_one_alt' => t('Content Block Template One (Pink)'),
        'content_block_two' => t('Content Block Template Two (2018 Dark)'),
        'content_mobile_parallax' => t('Content Mobile Parallax')
      ],
      '#default_value' => isset($block->cta) ? $block->cta['display'] : NULL
    ];

    $display_options = $block->cta['options'];
    $display_options = unserialize($display_options);
    $form['cta_settings']['display_after_page_views'] = [
      '#type' => 'select',
      '#title' => t('Display After this number of page views'),
      '#options' => drupal_map_assoc(range(0, 10)),
      '#description' => t('If set to 0, CTA will display on every page load.'),
      '#default_value' => isset($display_options['display_after_page_views']) ? $display_options['display_after_page_views'] : NULL,
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'modal_popup'],
        ],
      ]
    ];

    $form['cta_settings']['content_mobile_parallax_factor'] = [
      '#type' => 'textfield',
      '#title' => t('Factor'),
      '#element_validate' => ['element_validate_number'],
      '#default_value' => isset($display_options['content_mobile_parallax_factor']) ? $display_options['content_mobile_parallax_factor'] : 0,
      '#description' => t('Sets offset and speed. Value should be between -1 and 1. Less means slower.'),
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];
    $form['cta_settings']['content_mobile_parallax_factor_xs'] = [
      '#type' => 'textfield',
      '#title' => t('Factor XS'),
      '#element_validate' => ['element_validate_number'],
      '#default_value' => isset($display_options['content_mobile_parallax_factor_xs']) ? $display_options['content_mobile_parallax_factor_xs'] : 0,
      '#description' => t('Multiplier for scrolling speed and offset if window width is <576px'),
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];
    $form['cta_settings']['content_mobile_parallax_factor_sm'] = [
      '#type' => 'textfield',
      '#title' => t('Factor SM'),
      '#element_validate' => ['element_validate_number'],
      '#default_value' => isset($display_options['content_mobile_parallax_factor_sm']) ? $display_options['content_mobile_parallax_factor_sm'] : 0,
      '#description' => t('Multiplier for scrolling speed and offset if window width is <=768px'),
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];
    $form['cta_settings']['content_mobile_parallax_factor_md'] = [
      '#type' => 'textfield',
      '#title' => t('Factor MD'),
      '#element_validate' => ['element_validate_number'],
      '#default_value' => isset($display_options['content_mobile_parallax_factor_md']) ? $display_options['content_mobile_parallax_factor_md'] : 0,
      '#description' => t('Multiplier for scrolling speed and offset if window width is <=1024px'),
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];
    $form['cta_settings']['content_mobile_parallax_factor_lg'] = [
      '#type' => 'textfield',
      '#title' => t('Factor LG'),
      '#element_validate' => ['element_validate_number'],
      '#default_value' => isset($display_options['content_mobile_parallax_factor_lg']) ? $display_options['content_mobile_parallax_factor_lg'] : 0,
      '#description' => t('Multiplier for scrolling speed and offset if window width is <=1200px'),
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];
    $form['cta_settings']['content_mobile_parallax_type'] = [
      '#type' => 'select',
      '#title' => t('Type'),
      '#options' => [
        'background' => t('Background'),
        'foreground' => t('Foreground')
      ],
      '#default_value' => isset($display_options['content_mobile_parallax_type']) ? $display_options['content_mobile_parallax_type'] : 'background',
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];
    $form['cta_settings']['content_mobile_parallax_direction'] = [
      '#type' => 'select',
      '#title' => t('Type'),
      '#options' => [
        'vertical' => t('Vertical'),
        'horizontal' => t('Horizontal')
      ],
      '#default_value' => isset($display_options['content_mobile_parallax_direction']) ? $display_options['content_mobile_parallax_direction'] : 'vertical',
      '#description' => t('Direction the layer should travel as the user scrolls.'),
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];
    $form['cta_settings']['content_mobile_parallax_transition'] = [
      '#type' => 'textfield',
      '#title' => t('Transition'),
      '#default_value' => isset($display_options['content_mobile_parallax_transition']) ? $display_options['content_mobile_parallax_transition'] : 'translate 0.1s ease',
      '#description' => t('Sets CSS transition on elements with paroller type set to foreground.'),
      '#states' => [
        'visible' => [
          ':input[name="display_options"]' => ['value' => 'content_mobile_parallax'],
        ],
      ]
    ];

    $form['cta_settings']['campaign'] = [
      '#type' => 'textfield',
      '#title' => t('Campaign'),
      '#description' => t('Change this value for each campaign. Changing it will nullify returning visitors localStorage values allowing the <em>Already Donated</em> and <em>First Time Seen</em> values to be reset.</em>'),
      '#default_value' => isset($display_options['campaign']) ? $display_options['campaign'] : 'campaign-' . time(),
    ];
    $form['#submit'][] = '_ctas_block_submit';
  }
}

/**
 * Submit Handler: Block add/edit form.
 */
function _ctas_block_submit($form, &$form_state) {
  if ((int) $form_state['values']['cta_enabled']) {
    // Set up display options array.
    $options = [];

    $keys = [
      'display_after_page_views',
      'campaign',
      'content_mobile_parallax_factor',
      'content_mobile_parallax_factor_xs',
      'content_mobile_parallax_factor_sm',
      'content_mobile_parallax_factor_md',
      'content_mobile_parallax_factor_lg',
      'content_mobile_parallax_type',
      'content_mobile_parallax_direction',
      'content_mobile_parallax_transition'
    ];

    foreach ($keys as $key) {
      if (isset($form_state['values'][$key])) {
        $options[$key] = $form_state['values'][$key];
      }
    }

    db_merge('ctas')
      ->key([
        'delta' => $form_state['values']['delta'],
        'module' => $form_state['values']['module']
      ])
      ->fields([
        'bid' => isset($form['#block']) ? $form['#block']->bid : NULL,
        'module' => $form_state['values']['module'],
        'delta' => $form_state['values']['delta'],
        'status' => (int) $form_state['values']['cta_enabled'],
        'display' => $form_state['values']['display_options'],
        'options' => serialize($options)
      ])
      ->execute();
  }
}

/**
 * Implements hook_block_view_alter().
 */
function ctas_block_view_alter(&$data, $block) {
  // Check if this is a CTA.
  $result = db_query('SELECT * from {ctas} WHERE delta = :delta', [':delta' => $block->delta])->fetchAssoc();
  $display_options = isset($result['options']) ? unserialize($result['options']) : [];
  if ($result && $result['status']) {
    // Add display js.
    $module_path = drupal_get_path('module', 'ctas');

    if ($result['display'] == 'slide_down_from_top') {
      $data['content'] = [
        '#theme' => 'cta_slide_down_from_top',
        '#content' => $data['content'],
        '#attached' => [
          'js' => [
            [
              'data' => [
                'ctas' => [
                  $result['display'] => [
                    'delta' => $block->delta,
                    'campaign' => isset($display_options['campaign']) ? $display_options['campaign'] : ''
                  ]
                ],
              ],
              'type' => 'setting'
            ],
            [
              'data' => $module_path . '/js/' . $result['display'] . '.js',
              'type' => 'file'
            ]
          ],
        ],
      ];
    }
    elseif ($result['display'] == 'slide_up_from_bottom') {
      $data['content'] = [
        '#theme' => 'cta_slide_up_from_bottom',
        '#content' => $data['content'],
        '#attached' => [
          'js' => [
            [
              'data' => [
                'ctas' => [
                  $result['display'] => [
                    'delta' => $block->delta,
                    'campaign' => isset($display_options['campaign']) ? $display_options['campaign'] : ''
                  ]
                ],
              ],
              'type' => 'setting'
            ],
            [
              'data' => $module_path . '/js/' . $result['display'] . '.js',
              'type' => 'file'
            ]
          ],
        ],
      ];
    }
    elseif ($result['display'] == 'slide_up_from_bottom_signup') {
      $data['content'] = [
        '#theme' => 'cta_slide_up_from_bottom_signup',
        '#content' => $data['content'],
        '#attached' => [
          'js' => [
            [
              'data' => [
                'ctas' => [
                  $result['display'] => [
                    'delta' => $block->delta,
                    'campaign' => isset($display_options['campaign']) ? $display_options['campaign'] : ''
                  ]
                ],
              ],
              'type' => 'setting'
            ],
            [
              'data' => $module_path . '/js/' . $result['display'] . '.js',
              'type' => 'file'
            ]
          ],
        ],
      ];
    }
    elseif ($result['display'] == 'super_header') {

      $data['content'] = [
        '#theme' => 'cta_super_header',
        '#content' => $data['content'],
        '#attached' => [
          'js' => [
            [
              'data' => [
                'ctas' => [
                  $result['display'] => [
                    'delta' => $block->delta,
                    'campaign' => isset($display_options['campaign']) ? $display_options['campaign'] : ''
                  ],
                ],
              ],
              'type' => 'setting'
            ],
            drupal_get_path('module', 'ctas') . '/js/jquery.paroller.min.js' => [
              'scope' => 'footer'
            ],
            [
              'data' => $module_path . '/js/' . $result['display'] . '.js',
              'type' => 'file',
              'scope' => 'footer',
              'weight' => 100
            ],
          ],
        ],
      ];
    }
    elseif ($result['display'] == 'modal_popup') {
      // Get display options.
      $display_options = unserialize($result['options']);

      $data['content'] = [
        '#theme' => 'cta_modal_popup',
        '#content' => $data['content'],
        '#attached' => [
          'js' => [
            [
              'data' => [
                'ctas' => [
                  $result['display'] => [
                    'delta' => $block->delta,
                    'after_page_views' => $display_options['display_after_page_views'],
                    'cd_origin' => isset($_GET['cd-origin']) ? check_plain($_GET['cd-origin']) : FALSE,
                    'campaign' => isset($display_options['campaign']) ? $display_options['campaign'] : ''
                  ],
                ],
              ],
              'type' => 'setting'
            ],
            [
              'data' => $module_path . '/js/popup.js',
              'type' => 'file',
              'scope' => 'footer',
              'weight' => 100
            ],
            [
              'data' => $module_path . '/js/' . $result['display'] . '.js',
              'type' => 'file',
              'scope' => 'footer',
              'weight' => 100
            ]
          ],
        ],
      ];
    }
    elseif ($result['display'] == 'content_mobile_parallax') {
      // Get display options.
      $display_options = unserialize($result['options']);

      $data['content'] = [
        '#theme' => 'cta_content_mobile_parallax',
        '#content' => $data['content'],
        '#attached' => [
          'js' => [
            [
              'data' => [
                'ctas' => [
                  $result['display'] => [
                    'delta' => $block->delta,
                    'campaign' => isset($display_options['campaign']) ? $display_options['campaign'] : '',
                    'factor' => empty($display_options['content_mobile_parallax_factor']) ? $display_options['content_mobile_parallax_factor'] : 0.5,
                    'factor_xs' => empty($display_options['content_mobile_parallax_factor_xs']) ? $display_options['content_mobile_parallax_factor_xs'] : -0.1,
                    'factor_sm' => empty($display_options['content_mobile_parallax_factor_sm']) ? $display_options['content_mobile_parallax_factor_sm'] : -0.3,
                    'factor_md' => empty($display_options['content_mobile_parallax_factor_md']) ? $display_options['content_mobile_parallax_factor_md'] : 0.3,
                    'factor_lg' => empty($display_options['content_mobile_parallax_factor_lg']) ? $display_options['content_mobile_parallax_factor_lg'] : 0.4,
                    'type' => empty($display_options['content_mobile_parallax_type']) ? $display_options['content_mobile_parallax_type'] : 'background',
                    'direction' => empty($display_options['content_mobile_parallax_direction']) ? $display_options['content_mobile_parallax_direction'] : 'vertical',
                    'transition' => empty($display_options['content_mobile_parallax_transition']) ? $display_options['content_mobile_parallax_transition'] : 'translate 0.1s ease'
                  ],
                ],
              ],
              'type' => 'setting'
            ],
            drupal_get_path('module', 'ctas') . '/js/jquery.paroller.min.js' => [
              'scope' => 'footer'
            ],
            drupal_get_path('module', 'ctas') . '/js/content-mobile-parallax.js' => [
              'scope' => 'footer'
            ],
          ],
        ],
      ];
    }
  }
}

/**
 * Implements hook_theme().
 */
function ctas_theme($existing, $type, $theme, $path) {
  return [
    'cta_modal_popup' => [
      'variables' => ['content' => NULL],
      'template' => 'cta-modal-popup',
      'path' => $path . '/templates'
    ],
    'cta_slide_down_from_top' => [
      'variables' => ['content' => NULL],
      'template' => 'cta-slide-down-from-top',
      'path' => $path . '/templates'
    ],
    'cta_slide_up_from_bottom' => [
      'variables' => ['content' => NULL],
      'template' => 'cta-slide-up-from-bottom',
      'path' => $path . '/templates'
    ],
    'cta_slide_up_from_bottom_signup' => [
      'variables' => ['content' => NULL],
      'template' => 'cta-slide-up-from-bottom-signup',
      'path' => $path . '/templates'
    ],
    'cta_content_block_one' => [
      'variables' => ['title' => NULL, 'content' => NULL],
      'template' => 'cta-content-block-one',
      'path' => $path .'/templates'
    ],
    'cta_content_block_one_alt' => [
      'variables' => ['title' => NULL, 'content' => NULL],
      'template' => 'cta-content-block-one-alt',
      'path' => $path .'/templates'
    ],
    'cta_content_block_two' => [
      'variables' => ['title' => NULL, 'content' => NULL],
      'template' => 'cta-content-block-two',
      'path' => $path .'/templates'
    ],
    'cta_modal_winter_2017_block' => [
      'variables' => ['content' => NULL],
      'template' => 'cta-modal-winter-2017-block',
      'path' => $path . '/templates'
    ],
    'cta_super_header' => [
      'variables' => ['content' => NULL],
      'template' => 'cta-super-header',
      'path' => $path . '/templates'
    ],
    'cta_fundraiser_gauge_sidebar' => [
      'variables' => ['content' => NULL, 'max' => NULL, 'current' => NULL, 'raised' => NULL],
      'template' => 'cta-fundraiser-gauge-sidebar',
      'path' => $path . '/templates'
    ],
    'cta_fundraiser_gauge_slide_down' => [
      'variables' => ['content' => NULL, 'max' => NULL, 'current' => NULL, 'raised' => NULL],
      'template' => 'cta-fundraiser-gauge-slide-down',
      'path' => $path . '/templates'
    ],
    'cta_content_mobile_parallax' => [
      'variables' => ['content' => NULL],
      'template' => 'cta-content-mobile-parallax',
      'path' => $path . '/templates'
    ],
    'page__cta_donate' => [
      'render element' => 'page',
      'template' => 'page--cta-donate',
      'path' => $path . '/templates'
    ],
    'cta_donate_content' => [
      'variables' => ['form' => NULL],
      'template' => 'cta-donate-page',
      'path' => $path . '/templates'
    ],
    'ctas_donate_form' => [
      'render element' => 'form',
      'template' => 'cta-donate-form',
      'path' => $path . '/templates'
    ]
  ];
}

/**
 * Implements hook_preprocess_THEME_NAME().
 */
function ctas_preprocess_cta_fundraiser_gauge_sidebar(&$variables) {
  $variables['percent_complete'] = 100;
  $max = isset($variables['max']) ? $variables['max'] : FALSE;
  $current = isset($variables['current']) ? $variables['current'] : FALSE;
  if ($max && $current) {
    $variables['percent_complete'] = ($current / $max) * 100;
  }
}

/**
 * Implements hook_preprocess_THEME_NAME().
 */
function ctas_preprocess_cta_fundraiser_gauge_slide_down(&$variables) {
  $variables['percent_complete'] = 100;
  $max = isset($variables['max']) ? $variables['max'] : FALSE;
  $current = isset($variables['current']) ? $variables['current'] : FALSE;
  if ($max && $current) {
    $variables['percent_complete'] = ($current / $max) * 100;
  }
}

/**
 * Implements hook_library_alter().
 */
function ctas_library_alter(&$javascript, $module) {
  if ($module === 'system' && (current_path() == 'donate')) {
    // Make sure we inject either the minified or uncompressed version as desired.
    $min = variable_get('jquery_update_compression_type', 'min') == 'none' ? '' : '.min';
    $cdn = variable_get('jquery_update_jquery_cdn', 'none');
    $path = drupal_get_path('module', 'jquery_update');

    $version = '1.9';

    jquery_update_jquery_replace($javascript, $cdn, $path, $min, $version);
  }
}
